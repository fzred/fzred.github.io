[{"title":"记一次JavaScript的性能调优","url":"http://www.lred.me/2017/08/18/记一次JavaScript的性能调优/","content":"<p>之前写了个JS浮点运算的库 <a href=\"https://github.com/fzred/calculatorjs/\" target=\"_blank\" rel=\"external\">https://github.com/fzred/calculatorjs/</a> ，被人吐槽运算速度慢，写的时候确实没关心\b\b性能问题。</p>\n<p>calculatorjs 运算过程分三步</p>\n<ol>\n<li>\b词法分析</li>\n<li>语法分析</li>\n<li>\b数值运算</li>\n</ol>\n<p>分析后发现<strong>数值运算</strong>这个阶段性能比我想象中的差得多，所以优先从这个地方下手。</p>\n<p>优化前100W次的加法运算 0.22+0.33 耗时2秒，单纯的运算这效率确实太慢了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.time(<span class=\"string\">'precisionCalc add'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">let</span> i = 1; i &lt; 1000000; i++) &#123;</div><div class=\"line\">  precisionCalc.add(l, r)</div><div class=\"line\">&#125;</div><div class=\"line\">console.timeEnd(<span class=\"string\">'precisionCalc add'</span>)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">precisionCalc add: 2006.562ms</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/fzred/calculatorjs/blob/eabff6822803a26765632b7ad81ba5bd4eb5d967/src/precisionCalc.js\" target=\"_blank\" rel=\"external\">优化前代码</a><br><a href=\"https://github.com/fzred/calculatorjs/blob/8e9c5c86016c9f07137efc350459501e43d27128/src/precisionCalc.js\" target=\"_blank\" rel=\"external\">优化后代码</a></p>\n<p>开始分析代码<br>优化前代码逻辑里，一次运算会调用4次<strong>split</strong>，用来分割整数跟小数，这个完全可以优化到只调用2次。看一下100W次<code>&#39;0.22&#39;.split(&#39;.&#39;)</code> 需要多少时间 <strong>202.155ms</strong>，一次运算调用4次就是<strong>800ms</strong>左右，太慢。<br>所以自己实现的分割整数跟小数的split，调整了下逻辑，使其只调用两次。</p>\n<p>看26行 <code>Array(f + 1).join(&#39;0&#39;)</code>，作用是给小数点移位是填充0的。测试下 <code>Array(5).join(&#39;0&#39;)</code> 执行100W次平均需要 <strong>280ms</strong>，一次运算会调用两次，这也是可优化的点。所以我干脆直接用十个0的字符串代替 <strong>‘0000000000’</strong> ，偷懒了，留下一个隐患，小数超过10位运算就会出现问题。</p>\n<p>主要消耗性能的就是这两个地方，还有其他的一些调整就不一一赘述了。<a href=\"https://github.com/fzred/calculatorjs/commit/8e9c5c86016c9f07137efc350459501e43d27128#diff-7475cae84adc3e34ada13fffd8556173\" target=\"_blank\" rel=\"external\">看commit</a></p>\n<p>最终优化后跑一开始的测试代码的执行时间<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">precisionCalc add: 346.614ms</div></pre></td></tr></table></figure></p>\n<p>相比一开始的<strong>2006.562ms</strong>，这是个很大的提升。同时也反映了一开始的代码确实写得不好。</p>\n<p>来看看big.js的运算速度<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'big add'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">1000000</span>; i++) &#123;</div><div class=\"line\"> <span class=\"keyword\">new</span> Big(l).plus(r)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'big add'</span>)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">big add: 1076.701ms</div></pre></td></tr></table></figure>\n<p>运算上，calculatorjs是要比big.js快3倍的。</p>\n<p>词法分析，语法分析比较消耗性能，所以我单独把运算的API开放出来，来应对一些需要高性能的场景。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">calc.add(<span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>) <span class=\"comment\">// 0.3</span></div><div class=\"line\">calc.sub(<span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>) <span class=\"comment\">// -0.1</span></div><div class=\"line\">calc.mul(<span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>) <span class=\"comment\">// 0.02</span></div><div class=\"line\">calc.div(<span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>) <span class=\"comment\">// 0.5</span></div></pre></td></tr></table></figure></p>\n","categories":["笔记"],"tags":[]},{"title":"编程先学会提问","url":"http://www.lred.me/2017/08/04/编程先学会提问/","content":"<p>常常能在一些社区或技术群里看到一些“愚蠢“的问题。</p>\n<h2 id=\"什么是愚蠢的问题\"><a href=\"#什么是愚蠢的问题\" class=\"headerlink\" title=\"什么是愚蠢的问题\"></a>什么是愚蠢的问题</h2><ol>\n<li><p>期待的效果描述不清楚，描述了一推错误信息，却不说怎样才算正确的。</p>\n</li>\n<li><p>Google搜索就能轻易找到答案的问题。</p>\n</li>\n<li><p>动手尝试下就能知道答案的问题。</p>\n</li>\n<li><p>编译器与IDE，编程语言或框架容易挑起口水战的问题。</p>\n</li>\n</ol>\n<p>总结就是 <strong>需要让人去猜测究竟在问什么，自己不先动手研究就提问的问题</strong>。</p>\n<h2 id=\"如何提问\"><a href=\"#如何提问\" class=\"headerlink\" title=\"如何提问\"></a>如何提问</h2><p>先搜索，多尝试。如果认为直接让人指点一下可以少走很多弯路，那尽管问，看有多少人喷，毕竟菜从来都不是打扰别人借口。<br>描述问题准确简洁，这对于新手来说并不容易做到。那就尽可能详细的描述问题，说清楚\b期待的\b效果，自己尝试过什么方式解决，截图贴出代码，如果有条件可以整理个能重现问题的DEMO放到线上。<br>对自己的问题多负点责任，多点准备，提问时注意必要的礼仪，提问不代表就低人一筹。不要随便抓个人就问，慎重选择正确的社区，正确的人，避免打扰，这样大家都开心点。</p>\n<p>如果问题得不到答案，也不要到处重复发帖，这是无意义的喧闹，多回头看看问题，重新组织下问题的描述，再读一遍别人对问题回复，读懂它。再者可以通过其他渠道获取帮助（比如付费寻求解决方案）。</p>\n<p>最后问题解决了，要对帮助你的人表示感谢（如果让你省下了很多时间，那就请他喝杯咖啡），结贴总结解决问题的方法，让他们知道是怎么解决的。</p>\n","categories":["杂谈"],"tags":[]},{"title":"编程中有歧义的一些词语","url":"http://www.lred.me/2017/03/22/programme-words/","content":"<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><p>每当听到这个词，我总是带着疑问，请问你指的是写CSS的程序员吗？实际也可能是指的代码重构（Code refactoring）。身处前端这个圈子，听到的更多是指“网页重构工程师”，那么写CSS为什么要叫重构工程师？我之前呆过的一家公司管这个叫“网页制作”，侮辱性的话也有叫“页面仔”的，好像还是“重构”工程师要好听点。不过圈子内比较认可的是“网页重构”起源于《网站重构》一书。</p>\n<h2 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h2><p>如果有个程序员对我说出“H5”，我会理解成h5标签，如果他说他指的是跟产品经理一个意思，那么我会鄙视他。这词的起源大概是因为“HTML5”说出来太绕口了，后来有人把它简称为“H5”，因为移动端的流行，营销圈又把手机上里跑的网页叫做H5，到现在H5已经不是指HTML5，基本成了一个产品名词了。</p>\n<h2 id=\"黑客\"><a href=\"#黑客\" class=\"headerlink\" title=\"黑客\"></a>黑客</h2><p>黑客源自英文“Hacker”，对我来说这是一个褒义词，指的是对计算机技术非常精通、有着对技术的崇拜与对创新的不断追求的人。而现在更多的是指非法入侵他人电脑的人，其实这种人英文里面被称为“Cracker”，跟“Hacker”是两个词。在国内，这两个词都被译为”黑客“，经过一些群众的大量引用，已经变味了。甚至一些媒体把只会复制他人代码的脚笨小子也称为“黑客”。</p>\n<h2 id=\"精通\"><a href=\"#精通\" class=\"headerlink\" title=\"精通\"></a>精通</h2><p>新手程序员常常说到的一个形容词，接触的技术稍微多点的程序员都不会轻易说自已精通某项技术。我刚出来工作时喜欢在简历写上精通啥啥啥，之前负责公司的技术面试，发现在简历上写精通的大都是刚毕业的。或许以“精通”为关键字来过滤菜鸟和老手是可行的。类似的还有“入门”、“理解”、“熟练”，这些词在简历上也是能常常看到的，不同水平的人理解这几个词是不同的。</p>\n<h2 id=\"全栈\"><a href=\"#全栈\" class=\"headerlink\" title=\"全栈\"></a>全栈</h2><p>今天又有人跟我说，你会前端跟后端可以去做全栈啊。全栈英文为“Full Stack Developer”，我对这词的理解就是精通每一个领域，从编译原理、操作系统、数据库、图形学、大数据、人工智能、服务端，客户端，游戏，甚至精通设计、产品、运营。这对一个人类来说是不可能在每个领域都做到精通的，所以不可能有全栈。有人发现不可能学会这么多东西，又想以“全栈”工程师自居，就宣称具体会不会不重要，重要的是思维方式和学习能力。当然，怎么说怎么理解都行，都会有人说对和错，就跟我在简历上写上“入门”一样。</p>\n","categories":["杂谈"],"tags":[]},{"title":"关于我的竞争力","url":"http://www.lred.me/2017/02/26/关于我的竞争力/","content":"<p>最近在技术上似乎是碰到瓶颈，学了这么多库跟框架，也研究过不少源码，缺乏创造力这很难为竞争力带来提升。碰到过许多程序员，其中不少工作了六七年，更有甚者工作了十多年，但他们都没体现出跟工作经验相符的竞争力。当时我觉得这是因为他们不爱“学习”，做着重复的事情，对于爱“学习”的我是相当鄙视这种人的。</p>\n<p>谈谈我上面用引号括起来的“学习”。不爱“学习”，导致技术没有提升，这似乎是竞争力停滞的罪魁祸首。但是只要“学习”就能提高竞争力吗？最近发现我的竞争力跟一年前比似乎没太大变化，不像两三年前每个月都能看出明显的提升。我依然是爱“学习”的，依然是研究各种库跟框架，或是一些别人不知道的奇技淫巧。其实这些都是拿不上台面的，如果对别人说，嘿，我用过这个框架，那个库我也用过，这个方法好用，这你都不知道？显得很低级没水准，我现在已经下意识地以炫耀这些奇技淫巧为耻，知道我也装作不知道。因为这些学习成本太低了。把时间花一些“小技巧”上，这是不值的。或许我上面所鄙视的程序员也是爱“学习”的，只是方式错了，如果是这样，真不该鄙视他们。</p>\n<p>当然，不把时间花在“小技巧”上，技术学的很深，会的某个技能对于别人来说学习成本很高，这是有竞争力的。但这圈子有上百万的聪明人，想要脱颖而出，只会技术是不够的，还需要点创造力。</p>\n<p>接下来该怎么“学习”？我也不知道。或许是先把算法，编译原理补上，搞定本科自考的其中3科。现在是2017年2月，一年后再来验证自己。</p>\n","categories":["杂谈"],"tags":[]},{"title":"移动端适配浅谈","url":"http://www.lred.me/2016/11/17/modile-adaptation/","content":"<!--摘要-->\n<a id=\"more\"></a>\n<h2 id=\"主流适配方案-rem\"><a href=\"#主流适配方案-rem\" class=\"headerlink\" title=\"主流适配方案 rem\"></a>主流适配方案 rem</h2><blockquote>\n<p>针对不同手机屏幕尺寸和dpr动态的改变根节点html的font-size大小(基准值)。</p>\n</blockquote>\n<p>应该是目前最好的适配方案，关于这方面的文章：</p>\n<p><a href=\"http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme%203041\" target=\"_blank\" rel=\"external\">移动端高清、多屏适配方案</a><br><a href=\"http://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html\" target=\"_blank\" rel=\"external\">使用Flexible实现手淘H5页面的终端适配</a></p>\n<hr>\n<h2 id=\"展望未来-vm\"><a href=\"#展望未来-vm\" class=\"headerlink\" title=\"展望未来 vm\"></a>展望未来 vm</h2><p>基于rem布局的缩放布局都需要依赖JS去计算基准值，而使用vm则很简单的就能实现百分比缩放布局。<br>1vw表示百分之一的视窗宽度，同理10vw就是百分之十。但因兼容性方面限制，在国内目前是无法展示vw的身手了，相信未来vw会是主流。<br>查看兼容：<a href=\"http://caniuse.com/#search=vw\" target=\"_blank\" rel=\"external\">http://caniuse.com/#search=vw</a></p>\n<hr>\n<h2 id=\"html-css基础布局\"><a href=\"#html-css基础布局\" class=\"headerlink\" title=\"html+css基础布局\"></a>html+css基础布局</h2><h3 id=\"不要用-fixed\"><a href=\"#不要用-fixed\" class=\"headerlink\" title=\"不要用 fixed\"></a>不要用 <strong>fixed</strong></h3><p><code>position:fixed</code> 这css属性在ios上就是个坑</p>\n<ul>\n<li>滑动时会抖动</li>\n<li>软键盘弹出来时，fixed失效，滚动页面，加了fixed的元素也会跟着滚动</li>\n<li>滚动容器加了<code>-webkit-overflow-scrolling: touch</code> ，滚动时fixed不会跟着屏幕固定，停止滚动后才会固定</li>\n</ul>\n<p><strong>解决方案</strong></p>\n<ul>\n<li>使用div内滚动<strong>（推荐）</strong></li>\n<li>用position:absolute模拟，这个效果不佳，类似IE6的hack…</li>\n<li>当input元素focus时，改成position:absolute，blur的时候再改回来</li>\n<li>使用iscroll库</li>\n</ul>\n<p>总之就是不要用 <code>position:fixed</code>，然后使用div内滚动。</p>\n<h3 id=\"慎用iScroll之类的库。\"><a href=\"#慎用iScroll之类的库。\" class=\"headerlink\" title=\"慎用iScroll之类的库。\"></a>慎用<strong>iScroll</strong>之类的库。</h3><p><strong>慎用模拟滚动容器</strong>，因为性能！还有一点模拟的惯性滚动跟原生有体验习惯上的差异。如果是为了解决上拉刷新下拉加载又或是ios fixed的坑，都有基于原生滚动的解决方案。</p>\n<h3 id=\"弹层用fixed定位？\"><a href=\"#弹层用fixed定位？\" class=\"headerlink\" title=\"弹层用fixed定位？\"></a>弹层用fixed定位？</h3><p>如果确保弹层上没有input，那倒随意（absolute或fixed），能定位就行，如果有input，那fixed又要开始坑了。</p>\n<p>弹层主要解决的坑是：<strong>滚动穿透</strong>， 移动端弹出弹层，在弹层上滑动会导致下层的页面跟着滚动。</p>\n<p><strong>解决方案</strong></p>\n<ul>\n<li><p>body overflow: hidden height:100%<br>弹层显示的时候禁用 body 的滚动条，带来的问题是弹出前的滚动条的位置丢失，一般需要先记录位置，关闭弹层后再还原。</p>\n</li>\n<li><p>使用div内滚动布局 + -webkit-overflow-scrolling<br>没有-webkit-overflow-scrolling的内滚动布局不会有滚动穿透的问题，但没有-webkit-overflow-scrolling在IOS下滚动会很不流畅，而加了这属性又带来了滚动穿透的坑。<br>所以我们这么做，在弹层显示的时候，把-webkit-overflow-scrolling给干掉。弹层隐藏再加-webkit-overflow-scrolling加上。这方案相对来说，代码量少，好理解。</p>\n</li>\n</ul>\n<p>目前我没发现有纯CSS的解决方案，都依赖于JS。</p>\n<h3 id=\"内滚动布局\"><a href=\"#内滚动布局\" class=\"headerlink\" title=\"内滚动布局\"></a>内滚动布局</h3><p>基于上述的一些问题，目前使用内滚动布局应该是最好的解决方案。<br>首先，内滚动那就先把window的滚动条干掉，然后给个div设置滚动取代window的滚动，然后为了在iOS上有惯性滚动的效果还需要加上 <strong>-webkit-overflow-scrolling touch</strong>。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"scrollWrapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:2000px;background: linear-gradient(#ffffff, black);\"</span>&gt;</span></div><div class=\"line\">    内容</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-class\">.scrollWrapper</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.scrollWrapper</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-overflow-scrolling</span>: touch;</div><div class=\"line\">  overflow-y: auto;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>综上所述，写了个例子，使用内滚动布局，解决了fixed定位的坑（其实方案就是不用fixed）及弹层滚动穿透。</p>\n<p>例子完整代码：<a href=\"https://github.com/fzred/example/tree/master/mobile-layout\" target=\"_blank\" rel=\"external\">https://github.com/fzred/example/tree/master/mobile-layout</a></p>\n<p>在手机上看看试试 ：<a href=\"http://www.lred.me/example/mobile-layout/index.html\">http://www.lred.me/example/mobile-layout/index.html</a> ，可以扫下面的二维码</p>\n<p><img width=\"250\" src=\"http://ww3.sinaimg.cn/large/005FY9HCgw1fa9gitgs5ij30r80r874z.jpg\"></p>\n<hr>\n<h2 id=\"关于flex-box\"><a href=\"#关于flex-box\" class=\"headerlink\" title=\"关于flex box\"></a>关于flex box</h2><p>这是个牛逼的东西。<br>看下兼容性：<a href=\"http://caniuse.com/#search=flex\" target=\"_blank\" rel=\"external\">http://caniuse.com/#search=flex</a>，支持率不错，在国内用于生产基本没问题。<br>建议看完这个教程：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout</a><br>可以看下这大兄弟的例子：<a href=\"http://www.toyou.xyz/2016/05/10/flexbox-dice/\" target=\"_blank\" rel=\"external\">http://www.toyou.xyz/2016/05/10/flexbox-dice/</a></p>\n<hr>\n<h2 id=\"碰到的坑\"><a href=\"#碰到的坑\" class=\"headerlink\" title=\"碰到的坑\"></a>碰到的坑</h2><h3 id=\"在android-webview里，获取的font-size会受到系统设置字体大小的影响\"><a href=\"#在android-webview里，获取的font-size会受到系统设置字体大小的影响\" class=\"headerlink\" title=\"在android webview里，获取的font-size会受到系统设置字体大小的影响\"></a>在android webview里，获取的font-size会受到系统设置字体大小的影响</h3><p>可用下面这两行代码测试<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.documentElement.style.fontSize = <span class=\"string\">'100px'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.getComputedStyle(<span class=\"built_in\">document</span>.documentElement).fontSize)</div></pre></td></tr></table></figure></p>\n<p>对rem这种缩放布局，影响挺大。我也给 <a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"external\">lib-flexible</a> 提了pr，但还没被合并。</p>\n<p>地址：<a href=\"https://github.com/amfe/lib-flexible/pull/79/commits/587ea50f48af8f480cc4bcac5adba4eae74fd8ad\" target=\"_blank\" rel=\"external\">fix android webview 里 html font-size 因设置系统字体大小受到影响</a></p>\n<h3 id=\"ios-UIWebView-scroll事件不触发\"><a href=\"#ios-UIWebView-scroll事件不触发\" class=\"headerlink\" title=\"ios UIWebView scroll事件不触发\"></a>ios UIWebView scroll事件不触发</h3><p>这主要是历史原因，IOS8以前只有UIWebView，跟Safair并不是同一个内核。这东西各种奇怪的问题，比如 <strong>滚动时不触发scroll事件，滚动停止才触发一次</strong>。用 <strong>iScroll</strong> 的很大部分是因为这原因吧。<br>Safair就不会有这问题。IOS8以后苹果开放了WKWebView，使用的是跟Safair同一个内核，在速度，HTML5支持率上有了很大的提升。但是国产的大部分软件还在继续使用UIWebView，比如微信，QQ浏览器，UC浏览器。<br>手机上打开看看：<a href=\"http://www.lred.me/example/mobile-layout/scroll.html\">http://www.lred.me/example/mobile-layout/scroll.html</a></p>\n<h3 id=\"webkit-overflow-scrolling-touch-带来的问题：滚动穿透\"><a href=\"#webkit-overflow-scrolling-touch-带来的问题：滚动穿透\" class=\"headerlink\" title=\"-webkit-overflow-scrolling touch 带来的问题：滚动穿透\"></a>-webkit-overflow-scrolling touch 带来的问题：滚动穿透</h3><p>在上面 <em>html+css基础布局 —— 弹层用fixed定位？</em> 这一节有讨论</p>\n<h3 id=\"safair后退javascript不执行\"><a href=\"#safair后退javascript不执行\" class=\"headerlink\" title=\"safair后退javascript不执行\"></a>safair后退javascript不执行</h3><p>先记着，后面补充</p>\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><hr>\n<h3 id=\"判断后退操作\"><a href=\"#判断后退操作\" class=\"headerlink\" title=\"判断后退操作\"></a>判断后退操作</h3><p>###</p>\n<p><em>碰到的坑，持续更新</em></p>\n","categories":["笔记"],"tags":[]},{"title":"前端与后台接口跨域联调","url":"http://www.lred.me/2016/09/05/http-proxy/","content":"<p>现在业内前后端分离基本是共识，同时也有不少人对于分离后如何调用后台接口时都有不少疑问。<br>开发时，后台接口与前端的html页面一般是分开的，不在同一个域名下，如果直接访问接口一般会存在跨域问题。这里总结下常用的几种方式。</p>\n<h2 id=\"1-反向代理\"><a href=\"#1-反向代理\" class=\"headerlink\" title=\"1. 反向代理\"></a>1. 反向代理</h2><p>反向代理的方式很多，常用的有通过nginx，apache实现的，也有自己写代理服务的。不过我比较倾向于纯前端的解决方案，不喜欢搞个nginx或apache什么的。</p>\n<h3 id=\"Fiddler\"><a href=\"#Fiddler\" class=\"headerlink\" title=\"Fiddler\"></a>Fiddler</h3><p>没错，我常常用fiddler来调试接口，可能很多同学用这工具只是抓包用，没注意到<code>AutoResponder</code>这个功能。<br><img src=\"http://ww3.sinaimg.cn/large/005FY9HCgw1f7j1mt95pbj30f704iwfg.jpg\" alt=\"\"><br><strong>举个例子</strong><br>后台接口地址：<a href=\"http://api.douban.com/v2/movie/top250\" target=\"_blank\" rel=\"external\">http://api.douban.com/v2/movie/top250</a><br>本地环境：<a href=\"http://127.0.0.1:1045/index.html\" target=\"_blank\" rel=\"external\">http://127.0.0.1:1045/index.html</a><br>通过ajax去访问，很明显的404。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'/v2/movie/top250'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww4.sinaimg.cn/large/005FY9HCgw1f7j234ltlgj30ex01at8r.jpg\" alt=\"\"><br>现在借助Fiddler实现代理<br><img src=\"http://ww3.sinaimg.cn/large/005FY9HCgw1f7j24vrej0j30gh08ijtw.jpg\" alt=\"\"><br>现在再来访问<code>http://127.0.0.1:1045/v2/movie/top250</code>已经能拿接口的数据了。<br><code>AutoResponder</code>的Rule也支持正则匹配。<br>比如希望将<br><code>http://127.0.0.1:1045/v2/</code><br>统一代理到<br><code>http://api.douban.com/v2/</code><br>可以这么配置<br><img src=\"http://ww4.sinaimg.cn/large/005FY9HCgw1f7j2eev8naj30gf041aaw.jpg\" alt=\"\"><br>!注意，Fiddler的代理有点不完美，无法代理更改后台Response头信息中Set-Cookie中指定的域名。导致的问题是后台无法给浏览器设置cookie。<br>Fiddler就说到这里，更详细的可以看Fiddler的文档<a href=\"http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder\" target=\"_blank\" rel=\"external\">AutoResponder</a></p>\n<h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><p>借助<code>node-http-proxy</code>这个库来实现反向代理。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> httpProxy = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> proxy = httpProxy.createProxyServer(&#123;</div><div class=\"line\">    target: <span class=\"string\">'http://api.douban.com/'</span>,</div><div class=\"line\">    changeOrigin: <span class=\"literal\">true</span>,</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'/v2/*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    proxy.web(req, res)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">http.createServer(app).listen(<span class=\"string\">'1003'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'启动服务器完成，访问试试：http://127.0.0.1:1003/v2/movie/top250'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>http-proxy</code>的详细配置看这里<a href=\"https://github.com/nodejitsu/node-http-proxy\" target=\"_blank\" rel=\"external\">https://github.com/nodejitsu/node-http-proxy</a><br>相对于其他方案，写自己的代理服务是最灵活可控的。</p>\n<hr>\n<h2 id=\"2-Access-Control-Allow-Origin\"><a href=\"#2-Access-Control-Allow-Origin\" class=\"headerlink\" title=\"2. Access-Control-Allow-Origin\"></a>2. Access-Control-Allow-Origin</h2><p>需要后台返回的Response头信息中需要包含<em>Access-Control-Allow-Origin</em>，值一般为Request的<code>Origin</code>（即为前端页面的域名）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Access-Control-Allow-Origin: http://127.0.0.1</div></pre></td></tr></table></figure></p>\n<p>也可以直接设置为 <em>*</em> 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Access-Control-Allow-Origin: *</div></pre></td></tr></table></figure></p>\n<p>一般还有个可选字段 <code>Access-Control-Allow-Credentials</code>。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在跨域请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。<br>另一方面，前端也需要在AJAX请求中设置 <code>withCredentials</code> 属性。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"type\">XMLHttpRequest</span>();</div><div class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n","categories":["笔记"],"tags":[]},{"title":"css 局部作用域","url":"http://www.lred.me/2016/07/24/local-css/","content":"<!--摘要-->\n<a id=\"more\"></a>\n<h2 id=\"目前-CSS-最迫切需要的功能应该就是局部作用域了。\"><a href=\"#目前-CSS-最迫切需要的功能应该就是局部作用域了。\" class=\"headerlink\" title=\"目前 CSS 最迫切需要的功能应该就是局部作用域了。\"></a>目前 CSS 最迫切需要的功能应该就是局部作用域了。</h2><p>相信写css的人都会遇到class命名的问题：</p>\n<ul>\n<li>这个class的命名好像不太贴切，其他组件有没有也用到这个class，要是冲突了怎么办。</li>\n<li>改别人css代码的时候则会一直有个疑问：这个class到底是只在这个地方用了，还是其他地方都用了？</li>\n</ul>\n<p>于是一般这么做：</p>\n<ul>\n<li>class命名写长一点吧，降低冲突的几率</li>\n<li>加个父元素的选择器，限制范围</li>\n<li>重新命名个class吧，比较保险</li>\n</ul>\n<p><strong>因为CSS的作用是全局的</strong></p>\n<p>“局域化 css”也是组件化很重要的一步，目前也有各种解决方案：</p>\n<ul>\n<li>未来的 WebComponent 标准</li>\n<li>Polymer、Angular 2、Vue 等类似 Web Component 标准的MVVM框架</li>\n<li>基于React的 CSS in JS</li>\n</ul>\n<p>流行的解决方案，都需要webpack、browserify又或是需要高级的浏览器支持。</p>\n<p>之前有个PC端的项目，为了解决SEO，需要服务端渲染，及支持IE8，于是放弃了各种前端渲染的MVVM框架，node+express+ejs做的UI渲染层。</p>\n<p>通过include进来的部件是没有组件化的概念的，直接就成了HTML的一部分，针对page写的css可能就应用到widget上面，反过来widget也可能影响到page。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% include widget/header %&gt;</div></pre></td></tr></table></figure></p>\n<p>于是…</p>\n<h3 id=\"方案1-加个父元素的选择器\"><a href=\"#方案1-加个父元素的选择器\" class=\"headerlink\" title=\"方案1-加个父元素的选择器\"></a>方案1-加个父元素的选择器</h3><p>给page的css加个父元素的选择器吧<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.page-index</span>&#123;</div><div class=\"line\">    h1&#123;</div><div class=\"line\">        <span class=\"selector-tag\">font-size</span><span class=\"selector-pseudo\">:100px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然而还是避免不了冲突的问题</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-index\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">widget</span>/<span class=\"attr\">header</span> %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果<strong>widget/header</strong>也包含<strong>h1</strong>，很明显也会应用到page的样式。</p>\n<p>所以也没有很好的解决冲突的问题</p>\n<h3 id=\"方案2-BEM命名\"><a href=\"#方案2-BEM命名\" class=\"headerlink\" title=\"方案2-BEM命名\"></a>方案2-BEM命名</h3><p>类似于：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.block</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block__element</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block--modifier</span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>问题： </p>\n<ol>\n<li>这么长，影响书写效率</li>\n<li>html和css的size会大一些</li>\n<li>不爽（这点对我来说很重要）</li>\n</ol>\n<h3 id=\"方案3-标签加唯一的属性\"><a href=\"#方案3-标签加唯一的属性\" class=\"headerlink\" title=\"方案3-标签加唯一的属性\"></a>方案3-标签加唯一的属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">_c86f0316</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">h1</span><span class=\"selector-attr\">[_c86f0316]</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>确保page跟wedget的唯一属性不一致，也就解决了样式冲突的问题。</p>\n<p>这似乎跟css BEM命名方式类似了，就是确保选择器唯一，对的，一样的思路。但解决了BEM命名很长的问题，写起来也爽多了。</p>\n<p>同样会有“html和css的size会大一些”的问题，不过这个在gzip面前，跟带来的开发体验上可以忽略。</p>\n<p>这方案通过在项目的实践，证明是可行的。我也整理了下，写了个gulp的插件。详细的使用方式，看项目主页吧。</p>\n<p><div class=\"github-widget\" data-repo=\"fzred/gulp-local-css\"></div></p>\n<script src=\"http://git.hust.cc/GitHub-Repo-Widget.js/GithubRepoWidget.js\"></script>\n\n<p>我推崇下面的目录结构，<strong>按模块划分</strong>。所以插件默认也是只支持下面的方式。但如果的你的项目不是，glup-local-css 提供了参数可以配置，足以满足不同目录结构的项目。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">src</div><div class=\"line\">    ├─pages</div><div class=\"line\">        ├─about</div><div class=\"line\">            index.html</div><div class=\"line\">            index.css</div><div class=\"line\">    ├─widget</div><div class=\"line\">        ├─header</div><div class=\"line\">            index.html</div><div class=\"line\">            index.css</div></pre></td></tr></table></figure></p>\n<p>这也推荐下云龙大神的一篇文章</p>\n<p><a href=\"https://github.com/fouber/blog/issues/10\" target=\"_blank\" rel=\"external\">前端工程——基础篇</a></p>\n<p><img src=\"https://github.com/fouber/blog/raw/master/201508/assets/components.png\" alt=\"\"></p>\n<p>项目地址</p>\n<ul>\n<li><a href=\"https://github.com/fzred/gulp-local-css\" target=\"_blank\" rel=\"external\">gulp-local-css</a></li>\n</ul>\n<p>例子</p>\n<ul>\n<li><a href=\"https://github.com/fzred/gulp-local-css/tree/master/examples/simple\" target=\"_blank\" rel=\"external\">simple</a></li>\n</ul>\n","categories":["笔记"],"tags":[]},{"title":"webpack-dev-server 结合后端服务器 nodejs API","url":"http://www.lred.me/2016/03/17/webpack-dev-server-nodeapi/","content":"<!--摘要-->\n<a id=\"more\"></a>\n<blockquote>\n<p>webpack-dev-server是一个小型的node.js Express服务器,它使用webpack-dev-middleware中间件来为通过webpack打包生成的资源文件提供Web服务。它还有一个通过Socket.IO连接着webpack-dev-server服务器的小型运行时程序。webpack-dev-server发送关于编译状态的消息到客户端，客户端根据消息作出响应。</p>\n</blockquote>\n<p>Webpack及webpack-dev-server的简单使用就不说了。这里介绍当HTML不是由 <strong>webpack-dev-server</strong> 输出时，要怎么与 <strong>webpack-dev-server</strong> 配合</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>开发时启用了java的服务器，没有使用webpack-dev-server内置的http服务，现在加入了webpack，并且希望能够支持热更新（Hot Module Replacement），而 <strong>webpack-dev-server</strong> 就提供了热更新的功能。</p>\n<blockquote>\n<p>Hot Module Replacement，即模块热替换 HMR，在前端代码变动的时候无需整个刷新页面，只把变化的部分替换掉。</p>\n</blockquote>\n<p> <strong>webpack-dev-server</strong> 支持两种方式启动</p>\n<ul>\n<li>命令行</li>\n<li>nodejs API</li>\n</ul>\n<p>这里只说nodejs API的方式，相对于命令行更灵活，当然代码也要多写点。</p>\n<p>main.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'hello'</span>)</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./index.css'</span>)</div></pre></td></tr></table></figure></p>\n<p>index.css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>webpack.config.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path       = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    entry : &#123;</div><div class=\"line\">        main: <span class=\"string\">'./src/main.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path      : path.resolve(__dirname, <span class=\"string\">'static'</span>),</div><div class=\"line\">        filename  : <span class=\"string\">'[name].js?[hash]'</span>,</div><div class=\"line\">        publicPath: <span class=\"string\">'/static/'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'style!css'</span>&#125;,</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面这代码应该是webpack最简单的例子了。借助 webpack-dev-server 命令行工具也可以很简单的启动HMR服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack-dev-server --hot --inline</div></pre></td></tr></table></figure></p>\n<hr>\n<p>现在深入学习下 webpack-dev-server ，使用 webpack-dev-server 的nodejs api 实现HMR</p>\n<p>entry 需要改成<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'webpack-dev-server/client?http://127.0.0.1:8080/'</span>,<span class=\"string\">'webpack/hot/dev-server'</span>,<span class=\"string\">'./src/main.js'</span>]</div></pre></td></tr></table></figure></p>\n<p>添加 plugins<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</div></pre></td></tr></table></figure></p>\n<p>完整的代码 hot-server.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> WebpackDevServer = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack-dev-server\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> _                = <span class=\"built_in\">require</span>(<span class=\"string\">'underscore-contrib'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> config           = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> webpack          = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"></div><div class=\"line\">_.map(config.entry, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123;</div><div class=\"line\">    config.entry[key] = [</div><div class=\"line\">        <span class=\"string\">'webpack-dev-server/client?http://127.0.0.1:8080/'</span>,</div><div class=\"line\">        <span class=\"string\">'webpack/hot/dev-server'</span>,</div><div class=\"line\">        value</div><div class=\"line\">    ];</div><div class=\"line\">&#125;)</div><div class=\"line\">config.output.publicPath = <span class=\"string\">'http://localhost:8080/static/'</span></div><div class=\"line\"></div><div class=\"line\">config.plugins = (config.plugins || []).concat([</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> compiler = webpack(config)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> WebpackDevServer(compiler, &#123;</div><div class=\"line\">    hot       : <span class=\"literal\">true</span>,</div><div class=\"line\">    noInfo    : <span class=\"literal\">true</span>,</div><div class=\"line\">    filename  : config.output.filename,</div><div class=\"line\">    publicPath: config.output.publicPath,</div><div class=\"line\">    stats     : &#123;<span class=\"attr\">colors</span>: <span class=\"literal\">true</span>&#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\">server.listen(<span class=\"number\">8080</span>, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Listening at http://127.0.0.1:8080'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>更多参数配置看这里<br><a href=\"http://webpack.github.io/docs/webpack-dev-middleware.html\" target=\"_blank\" rel=\"external\">http://webpack.github.io/docs/webpack-dev-middleware.html</a></p>\n<p>然后在后台服务器输出的html上加上script<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://127.0.0.1:8080/static/main.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<hr>\n<p><a href=\"https://github.com/fzred/webpack-demo/tree/master/webpack-dev-server\" target=\"_blank\" rel=\"external\">查看DEMO</a></p>\n","categories":["笔记"],"tags":["webpack","nodejs"]},{"title":"webstorm添加*.vue文件支持","url":"http://www.lred.me/2016/01/07/webstorm添加-vue文件支持/","content":"<!--摘要-->\n<a id=\"more\"></a>\n<p>更新于2017-03-01</p>\n<p>这篇文章写了有1年多了，发现这篇文章关注的人不少。现在Webstorm要支持vue已经有了更方便的方式。避免误导，还是来更新下。</p>\n<h2 id=\"方法1：安装-Vue-js-插件\"><a href=\"#方法1：安装-Vue-js-插件\" class=\"headerlink\" title=\"方法1：安装 Vue.js 插件\"></a>方法1：安装 Vue.js 插件</h2><p>打开 Settings-&gt;Plugins 搜索安装</p>\n<h3 id=\"css预处理器支持\"><a href=\"#css预处理器支持\" class=\"headerlink\" title=\"css预处理器支持\"></a>css预处理器支持</h3><p>在我写这文章的时间，还没有支持预处理的方案，不过现在已经很简单了。<br>给 style 标签加上 <strong>rel=”stylesheet/scss”</strong> 属性即可支持 <strong>scss</strong> 语法，看规则可以改成 <strong>less</strong> <strong>stylus</strong> 之类的。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet/scss\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"sass\"</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"方法2：Webstorm-EAP-版已经原生支持vue文件\"><a href=\"#方法2：Webstorm-EAP-版已经原生支持vue文件\" class=\"headerlink\" title=\"方法2：Webstorm EAP 版已经原生支持vue文件\"></a>方法2：Webstorm EAP 版已经原生支持vue文件</h2><p>看这里 <a href=\"https://blog.jetbrains.com/webstorm/2017/02/webstorm-2017-1-eap-171-2822/\" target=\"_blank\" rel=\"external\">https://blog.jetbrains.com/webstorm/2017/02/webstorm-2017-1-eap-171-2822/</a> EAP版可能不太稳定，不过也能用。<br>或者等过段时间发布的 Webstorm 2017.1 稳定版。<br>不得不说vue真是越用越厉害了啊，Webstorm也开始支持了。最后 <strong>原生支持才是最好的</strong></p>\n<hr>\n<h1 id=\"以下内容过时，针对旧版本的Webstorm\"><a href=\"#以下内容过时，针对旧版本的Webstorm\" class=\"headerlink\" title=\"以下内容过时，针对旧版本的Webstorm\"></a>以下内容过时，针对旧版本的Webstorm</h1><p>webstorm是前端开发神器，但我一直都不喜欢webstorm，就因为那很挫的配色和那大光标。<br>上阵子开始玩 Vuejs，在 Vue 中，可以 .vue 文件实现组件化，但各种编辑器都支持不好，作者也给sublime开发了相关的vue插件。我觉得用sublime就是在浪费生命啊，花那么多时间来装插件配环境，我选择IDE！<br>坚持用sublime写了一个月的vue，没有智能提示（而对重度依赖提示），不能对代码进行格式化，手动调缩进，尼玛，能坚持这么久也不容易。所以折腾了下webstorm看怎么支持，所以就有这篇笔记。</p>\n<h2 id=\"vue支持\"><a href=\"#vue支持\" class=\"headerlink\" title=\"vue支持\"></a>vue支持</h2><p>打开 Settings =&gt; File Types 找到 HTML 添加 *.vue<br><img src=\"/imgs/20160107002257.png\" alt=\"\"><br>这样vue文件就相当于html文件，可以编辑css，js，也都有智能提示。<br>我一般用的是 es6 ，所以vue写es6的代码,webstorm还是会报错。</p>\n<h2 id=\"vue里ES6支持\"><a href=\"#vue里ES6支持\" class=\"headerlink\" title=\"vue里ES6支持\"></a>vue里ES6支持</h2><p>将script标签添加 <strong>type=”es6”</strong> 属性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"es6\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后打开 Settings =&gt; Language Injections 添加 XML Tag Injection，内容如下图。<br><img src=\"/imgs/20160107003210.png\" alt=\"\"></p>\n<h2 id=\"js-支持ES6\"><a href=\"#js-支持ES6\" class=\"headerlink\" title=\"*.js 支持ES6\"></a>*.js 支持ES6</h2><p>webstorm默认js文件是ES5语法<br>打开 Settings =&gt; Languages &amp; Frameworks =&gt; Javascript<br>把 Javascript Language version 改为 ECMAScript 6<br><img src=\"/imgs/20160107004135.png\" alt=\"\"></p>\n<p>PS:要在vue文件里写sass,stylus之类的css预处理，webstorm就不支持了，我也尝试了添加 Injection ，代码高亮正常，但却是临时的，只要一改动代码，又会划很多红线了，经过google，这似乎是webstorm的一个已知的Bug。</p>\n","categories":["笔记"],"tags":["vuejs","webstorm"]},{"title":"a标签的黑魔法","url":"http://www.lred.me/2016/01/05/a标签的黑魔法/","content":"<!--摘要-->\n<a id=\"more\"></a>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>在Js中需要根据相对路径拿到绝对路径时，因为网站目录不固定，有本地地址，测试地址，生产地址<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>//<span class=\"number\">127.0</span><span class=\"meta\">.0</span><span class=\"meta\">.1</span>:<span class=\"number\">8088</span>/index.html</div><div class=\"line\"><span class=\"symbol\">http:</span>//<span class=\"keyword\">test</span>.site.com/<span class=\"keyword\">test</span>/<span class=\"keyword\">test</span>/index.html</div><div class=\"line\"><span class=\"symbol\">http:</span>//<span class=\"keyword\">test</span>.site.com/<span class=\"keyword\">test</span>/<span class=\"keyword\">test</span>/</div><div class=\"line\"><span class=\"symbol\">http:</span>//site.com/<span class=\"keyword\">test</span>/<span class=\"keyword\">test</span>/</div></pre></td></tr></table></figure></p>\n<p><code>path+&#39;./static/img.png&#39;</code><br>希望拿到当前目录 + ‘./static/img.png’<br>所以拼接字符串做起来并不容易，代码容易写得很丑。</p>\n<h2 id=\"a标签出场\"><a href=\"#a标签出场\" class=\"headerlink\" title=\"a标签出场\"></a>a标签出场</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">qualifyURL</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</div><div class=\"line\">\ta.href = url;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a.href;</div><div class=\"line\">&#125;</div><div class=\"line\">qualifyURL(<span class=\"string\">'./static/img.png'</span>)</div></pre></td></tr></table></figure>\n<p>似乎这样只能拿到当前网站的绝对路径，这时可以配合 <a href=\"http://www.w3school.com.cn/tags/tag_base.asp\" target=\"_blank\" rel=\"external\">base</a> 标签<br>这标签我几乎没用过，<a href=\"http://www.w3school.com.cn/tags/tag_base.asp\" target=\"_blank\" rel=\"external\">介绍看这里&lt;&lt;</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">absolutize</span>(<span class=\"params\">url,base</span>) </span>&#123;</div><div class=\"line\">    base=base || location.href;</div><div class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"built_in\">document</span>.implementation.createHTMLDocument();  <span class=\"comment\">//创建新的DOM</span></div><div class=\"line\">    <span class=\"keyword\">var</span> b = d.createElement(<span class=\"string\">'base'</span>);      </div><div class=\"line\">    d.head.appendChild(b);      <span class=\"comment\">//将base添加到新创建的DOM</span></div><div class=\"line\">    <span class=\"keyword\">var</span> a = d.createElement(<span class=\"string\">'a'</span>);</div><div class=\"line\">    d.body.appendChild(a);</div><div class=\"line\">    b.href = base;          <span class=\"comment\">//设置base 规定页面中所有相对链接的基准 URL。</span></div><div class=\"line\">    a.href = url;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.href;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">absolutize(<span class=\"string\">'./static/img.png'</span>)</div><div class=\"line\">absolutize(<span class=\"string\">'./static/img.png'</span>,<span class=\"string\">\"http://baidu.com\"</span>)</div></pre></td></tr></table></figure>\n<p>这里也是做下笔记，在碰到这问题之前，我甚至都不知道还有 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument\" target=\"_blank\" rel=\"external\">document.implementation</a> 这东西</p>\n<p><strong>ps：</strong><br>这a标签的用法在这里IE6这老古董有点兼容问题，这里就不阐述了。看这文章<br><a href=\"http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\" target=\"_blank\" rel=\"external\">Getting an absolute URL from a relative one.</a></p>\n","categories":["前端"],"tags":["js"]},{"title":"html5版的坦克大战","url":"http://www.lred.me/2015/12/20/html5版的坦克大战/","content":"<p>十月份国庆徒步回来后没啥事，就花了几天把14年写的坦克大战重新写一篇，之前是用原生javascript的，那代码简直不能看。刚好那段时间在折腾typescript，so..改用ts写。<br>先放上git地址 <strong><a href=\"https://github.com/fzred/Battle-City\" target=\"_blank\" rel=\"external\">https://github.com/fzred/Battle-City</a></strong><br><a id=\"more\"></a><br>简单说下重要的几个类</p>\n<ul>\n<li><a href=\"#spirit_精灵\">spirit</a></li>\n<li><a href=\"#playing_游戏场景\">playing</a></li>\n<li><a href=\"#imgSource_资源管理\">imgSource</a></li>\n</ul>\n<h2 id=\"spirit-精灵\"><a href=\"#spirit-精灵\" class=\"headerlink\" title=\"spirit 精灵\"></a>spirit 精灵</h2><p>每个游戏引擎都有的概念，描述精灵的外观及动作。<br>tank（坦克）、missile（子弹）、terrain（地形，障碍物）类继承自 spirit 。<br><a href=\"https://github.com/fzred/Battle-City/blob/master/tsjs/spirit.ts\" target=\"_blank\" rel=\"external\">源码 https://github.com/fzred/Battle-City/blob/master/tsjs/spirit.ts</a></p>\n<h2 id=\"playing-游戏场景\"><a href=\"#playing-游戏场景\" class=\"headerlink\" title=\"playing 游戏场景\"></a>playing 游戏场景</h2><p>管理游戏生命周期、事件、spirit、游戏绘制，对象碰撞检测。<br><a href=\"https://github.com/fzred/Battle-City/blob/master/tsjs/playing.ts\" target=\"_blank\" rel=\"external\">源码 https://github.com/fzred/Battle-City/blob/master/tsjs/playing.ts</a></p>\n<h2 id=\"imgSource-资源管理\"><a href=\"#imgSource-资源管理\" class=\"headerlink\" title=\"imgSource 资源管理\"></a>imgSource 资源管理</h2><p>管理游戏中用的资源，一般在游戏开始前加载。<br>游戏中只用到了图片资源，所以只有load.image<br><a href=\"https://github.com/fzred/Battle-City/blob/master/tsjs/loadresource.ts\" target=\"_blank\" rel=\"external\">源码 https://github.com/fzred/Battle-City/blob/master/tsjs/loadresource.ts</a></p>\n<p><img src=\"/imgs/20151215164203.png\" alt=\"\"></p>\n","categories":["前端"],"tags":["typescript","游戏"]},{"title":"记一次iOS下touch事件遇到的坑","url":"http://www.lred.me/2015/12/10/记一次iOS下touch事件遇到的坑/","content":"<!--摘要-->\n<a id=\"more\"></a>\n<p>上星期项目有个拖动的效果，小意思啦，分分钟搞定，然而在测试时发现iOS下表现却不正常。<br>如下代码，android、ios运行结果不一样<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background:#333;height:100%\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> startPoint = &#123;&#125;;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">\"touchstart\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">        startPoint = e.touches[0];</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"touchstart\"</span>, startPoint.pageX);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">\"touchmove\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"touchmove\"</span>, startPoint.pageX);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">\"touchend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"touchend\"</span>, startPoint.pageX);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>android<br><img src=\"/imgs/20151210062429.png\" alt=\"\"></p>\n<p>iOS<br><img src=\"/imgs/20151210062755.png\" alt=\"\"></p>\n<p>可以看到iOS下startPoint.pageX是跟着touchmove,touchend事件在变，看到这里，我在想<br>touchstart事件的 <em>e.touches[0]</em> 跟 touchmove touchend 里的会不会是同一个？<br>好吧，试一下就知道了。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background:#333;height:100%\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> point = &#123;&#125;;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">\"touchstart\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">        point = e.touches[0];</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"touchstart\"</span>, point.pageX);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">\"touchmove\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"touchmove\"</span>, point.pageX, e.touches[<span class=\"number\">0</span>] === point);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">\"touchend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"touchend\"</span>, point.pageX, e.changedTouches[<span class=\"number\">0</span>] === point);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>android<br><img src=\"/imgs/20151210063349.png\" alt=\"\"></p>\n<p>iOS<br><img src=\"/imgs/20151210063500.png\" alt=\"\"></p>\n<p>确实是这样。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>把 <em>pageX</em> 保存一下 <code>point.pageX = e.touches[0].pageX;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background:#333;height:100%\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> point = &#123;&#125;;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">\"touchstart\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">        point.pageX = e.touches[0].pageX;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"touchstart\"</span>, point.pageX);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">\"touchmove\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"touchmove\"</span>, point.pageX);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">\"touchend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"touchend\"</span>, point.pageX);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","categories":["笔记"],"tags":["移动端"]},{"title":"深入理解setTimeout(fn,0)","url":"http://www.lred.me/2015/11/29/深入理解setTimeout-fn-0/","content":"<p><code>setTimeout(fn,0)</code> 各种奇技淫巧之一，莫名其妙的解决一些问题，这里就不列举了。下面这段代码依次弹出1,3,2。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">1</span>)</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"number\">2</span>)</div><div class=\"line\">&#125;,<span class=\"number\">0</span>)</div><div class=\"line\">alert(<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>理解<code>setTimeout</code>之前你需要知道<strong>JavaScript的单线程机制和浏览器的事件模型</strong><br><a id=\"more\"></a></p>\n<h2 id=\"js是单线程，但浏览器不是\"><a href=\"#js是单线程，但浏览器不是\" class=\"headerlink\" title=\"js是单线程，但浏览器不是\"></a>js是单线程，但浏览器不是</h2><p>例如Webkit或是Gecko引擎，都有如下线程：</p>\n<ul>\n<li>javascript引擎线程</li>\n<li>界面渲染线程</li>\n<li>浏览器事件触发线程</li>\n<li>Http请求线程</li>\n</ul>\n<p>他们之间是如何配合的呢？</p>\n<h3 id=\"浏览器UI线程\"><a href=\"#浏览器UI线程\" class=\"headerlink\" title=\"浏览器UI线程\"></a>浏览器UI线程</h3><p>总的来说，大多数浏览器有一个单独的处理进程，它由两个任务所共享：<br>JavaScript任务和用户界面更新任务。每个时刻只有其中的一个操作得以执行，也就是说当JavaScript代码运行时用户界面不能对输入产生反应，反之亦然。<br>或者说，当JavaScript运行时，用户界面就被“锁定”了。管理好JavaScript运行时间对网页应用的性能很重。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>浏览器UI线程Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"handleClick()\"</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"actionscript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span><span class=\"params\">()</span> </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.appendChild(div);</span></div><div class=\"line\"><span class=\"actionscript\">            div.innerHTML = <span class=\"string\">\"Clicked!\"</span>;</span></div><div class=\"line\"><span class=\"undefined\">        &#125;</span></div><div class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面这例子，当点击button时，会增加两个任务:</p>\n<ol>\n<li>更新button样式（按下状态）</li>\n<li><em>执行handleClick()</em></li>\n</ol>\n<p>在<code>handleClick</code>执行过程中又创建了个 div ，会增加一个UI更新的任务。<br>流程如下图，可以看到，UI线程同一时间只能处理一个任务。<br><img src=\"/imgs/20151129150856.jpg\" alt=\"\"></p>\n<p>把代码改下，如下handleClick这任务死循环了，页面出现假死状态，导致无法执行接下来的任务，UI不会更新，新添加的 div 也不会出现。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div);</div><div class=\"line\">    div.innerHTML = <span class=\"string\">\"Clicked!\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h3><p>继续来说 <code>setTimeout</code> ,调用 <code>setTimeout()</code> 告诉JavaScript引擎等待一定时间然后将JavaScript任务添加到<strong>UI任务队列</strong>中。<br>这很好的解释了我们一开始那段代码，<code>setTimeout</code> 会创建一个新的任务，就算参数是 <strong>0</strong> 也不是在当前任务执行。<br>然而实际情况是参数是 <strong>0</strong> 也无法准确到立刻加载任务队列，JavaScript定时器延时往往不准确，快慢大约几毫秒。并不意味任务将在调用setTimeout()之后精确的指定时间后加入队列。所有浏览器试图尽可能准确，但通常会发生几毫秒滑移，或快或慢。正因为这个原因，定时器不可用于测量实际时间。<br>HTML5规范中要求setTimeout精确问题不超过<strong>4ms</strong></p>\n<h3 id=\"如果JavaScript是多线程\"><a href=\"#如果JavaScript是多线程\" class=\"headerlink\" title=\"如果JavaScript是多线程\"></a>如果JavaScript是多线程</h3><p>如果js是多线程的方式来操作UIDOM，则可能出现UI操作的冲突；在多线程的交互下，处于UI中的DOM节点就可能成为一个临界资源。假设存在两个线程同时操作一个DOM，而线程1要求浏览器删除DOM节点，线程2却希望修改这个节点的某些样式风格。这个时候浏览器就无法裁决采用哪一种策略了。<br>搞WinForm的同学可能会说：<strong>我们可以引入“锁”来解决这些冲突。</strong>但为了避免引入了更大的复杂性，所以JavaScript从诞生开始就选择了单线程执行。</p>\n","categories":["前端"],"tags":["js"]},{"title":"前端数据绑定的思考","url":"http://www.lred.me/2015/11/22/前端数据绑定的思考/","content":"<!--摘要-->\n<a id=\"more\"></a>\n<p>像这样的代码你刚学前端时肯定写过不少，维护别人的代码时，也没少被这样的代码坑过。拼接字符串是件效率低下，容易出错的事，维护起来也相当麻烦。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ullist\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"actionscript\"> <span class=\"keyword\">var</span> list = [</span></div><div class=\"line\"><span class=\"actionscript\">\t&#123; title: <span class=\"string\">\"t1\"</span>, author: <span class=\"string\">\"a1\"</span> &#125;,</span></div><div class=\"line\"><span class=\"actionscript\">\t&#123; title: <span class=\"string\">\"t2\"</span>, author: <span class=\"string\">\"a2\"</span> &#125;,</span></div><div class=\"line\"><span class=\"actionscript\">\t&#123; title: <span class=\"string\">\"t3\"</span>, author: <span class=\"string\">\"a3\"</span> &#125;,</span></div><div class=\"line\"><span class=\"actionscript\">\t&#123; title: <span class=\"string\">\"t4\"</span>, author: <span class=\"string\">\"a4\"</span> &#125;,</span></div><div class=\"line\"><span class=\"undefined\">];</span></div><div class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> ulhtml = <span class=\"string\">\"\"</span>;</span></div><div class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;list.length;i++)&#123;</span></div><div class=\"line\"><span class=\"actionscript\">\tulhtml+=<span class=\"string\">\"&lt;li&gt;标题：\"</span>+list[i].title+<span class=\"string\">\"-作者:\"</span>+list[i].author+<span class=\"string\">\"&lt;/li&gt;\"</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#ullist\"</span>).innerHTML = ulhtml;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>当需要给li加个class时，第一反应会去看html，发现html里根本没有li，又去找js文件。js干了本不该它干的事，就是维护html。<br>同样的，这样的代码也是难以维护的，js不该直接操作css。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#ullist\"</span>).style.background = <span class=\"string\">\"#f00\"</span>;</div></pre></td></tr></table></figure></p>\n<p>对代码修改后。将li模板放在ul里，js再去替换模板占位符。还有除非你有强迫症，否则不要写那么多的var。。。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ullist\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>标题：&#123;title&#125;-作者：&#123;author&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> list = [</span></div><div class=\"line\"><span class=\"actionscript\">        &#123; title: <span class=\"string\">\"t1\"</span>, author: <span class=\"string\">\"a1\"</span> &#125;,</span></div><div class=\"line\"><span class=\"actionscript\">        &#123; title: <span class=\"string\">\"t2\"</span>, author: <span class=\"string\">\"a2\"</span> &#125;,</span></div><div class=\"line\"><span class=\"actionscript\">        &#123; title: <span class=\"string\">\"t3\"</span>, author: <span class=\"string\">\"a3\"</span> &#125;,</span></div><div class=\"line\"><span class=\"actionscript\">        &#123; title: <span class=\"string\">\"t4\"</span>, author: <span class=\"string\">\"a4\"</span> &#125;,</span></div><div class=\"line\"><span class=\"undefined\">    ];</span></div><div class=\"line\"><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#ullist\"</span>),</span></div><div class=\"line\"><span class=\"actionscript\">        ulhtmltemp = ul.innerHTML,  <span class=\"comment\">//li模板</span></span></div><div class=\"line\"><span class=\"actionscript\">        ulhtml = <span class=\"string\">\"\"</span>;</span></div><div class=\"line\"><span class=\"actionscript\">    list.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(item)</span> </span>&#123;</span></div><div class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//替换模板占位符</span></span></div><div class=\"line\"><span class=\"actionscript\">        ulhtml += ulhtmltemp.replace(<span class=\"string\">\"&#123;title&#125;\"</span>, item.title)</span></div><div class=\"line\"><span class=\"actionscript\">                            .replace(<span class=\"string\">\"&#123;author&#125;\"</span>, item.author);</span></div><div class=\"line\"><span class=\"undefined\">    &#125;);</span></div><div class=\"line\"><span class=\"undefined\">    ul.innerHTML = ulhtml;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>看到这里，不用多说，这么做能够完全剥离html和代码逻辑，便于后期的代码维护。</p>\n<p>如果多几个占位符，写那么多 <code>replace</code> 也是挺累的一件事，该模板引擎出场了。再继续优化代码。<code>tempReplace</code> 干的事很好理解，就是用正则把占位符查找出来，然后对应data的value来替换。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tempReplace</span>(<span class=\"params\">str, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/&#123;([^&#125;]*)&#125;/igm</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, $<span class=\"number\">1</span></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data[$<span class=\"number\">1</span>] ? data[$<span class=\"number\">1</span>] : $;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">list.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    ulhtml += tempReplace(ulhtmltemp, item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><img src=\"/imgs/T1_l5.XmXkXXXYK5jq-705-584.png\" alt=\"\"><br>把 <code>tempReplace</code> 方法说成模板引擎有点夸张了，模板引擎应该要有基本的<em>逻辑控制语句</em>，比如for,if，于是便有了如今这市面上众多的模板引擎。<br>诸如Mustache, jQuery tmpl, Kissy template, ejs, doT, nTenjin, artTemplate…也有MV*型的Angularjs, Reactjs。</p>\n<h3 id=\"废话几句\"><a href=\"#废话几句\" class=\"headerlink\" title=\"废话几句\"></a>废话几句</h3><p>其实最重要的一点就是：【视图（包括展示渲染逻辑）与程序逻辑的分离】。<br>好处就是维护方便了，维护方便了，维护方便了，应用优秀的开发模式更方便了（mvvc，mvc等）。</p>\n","categories":["前端"],"tags":["js","模板引擎"]},{"title":"hexo+github pages搭建博客","url":"http://www.lred.me/2015/11/16/hexo+github pages搭建博客/","content":"<p>顺利的将原来go写的博客迁移到了github pages上，用hexo生成的静态页，主要是懒得去维护服务器了，之前写的一些文章，大部分都没什么价值了，就不迁到新博客了，重新开始。<br>之前也一直在这迁移博客的想法，一直没去行动，这次是因为原博客不支持markdown，懒得开发又刚好有时间，就折腾了下，也遇到点坑，也就有了这篇笔记。</p>\n<a id=\"more\"></a>\n<p>写这篇文章时，hexo的版本是 3.1.1 ，网上有一些文章说的是2.*，2到3是有些地方不兼容的，文章也没有特别标注，所以看的时候注意看下文章发表的时间，以免踩坑。<br>网上文章也很多，但我还是要再写一篇，因为我看网上文章来的时候，还是碰到不少坑，也是看了多篇文章才解决了。本文也是方便hexo的入门，更权威的请查看<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"目录索引\"><a href=\"#目录索引\" class=\"headerlink\" title=\"目录索引\"></a>目录索引</h2><ul>\n<li><a href=\"#hexo介绍\">hexo介绍</a></li>\n<li><a href=\"#hexo安装\">hexo安装</a></li>\n<li><a href=\"#写篇文章\">写篇文章</a></li>\n<li><a href=\"#更换主题\">更换主题</a></li>\n<li><a href=\"#主题的修改\">主题的修改</a></li>\n<li><a href=\"#自定义页面\">自定义页面</a></li>\n<li><a href=\"#404页面\">404页面</a></li>\n<li><a href=\"#图片放哪\">图片放哪</a></li>\n<li><a href=\"#评论插件\">评论插件</a></li>\n<li><a href=\"#文章搜索\">文章搜索</a></li>\n<li><a href=\"#处理原先的文章地址\">处理原先的文章地址</a></li>\n<li><a href=\"#部署到github_pages上\">部署到github pages上</a></li>\n<li><a href=\"#github_pages域名绑定\">github pages域名绑定</a></li>\n<li><a href=\"#常用插件\">常用插件</a></li>\n<li><a href=\"#常见问题\">常见问题</a></li>\n</ul>\n<h2 id=\"hexo介绍\"><a href=\"#hexo介绍\" class=\"headerlink\" title=\"hexo介绍\"></a>hexo介绍</h2><p>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架。不需要数据库，写完md文件直接生成html文件，文章评论使用社会化评论插件，文章搜索配合swiftype也可以很好解决。markdown的写作方式很适合程序员，我表示用起来非常爽。。。</p>\n<h2 id=\"hexo安装\"><a href=\"#hexo安装\" class=\"headerlink\" title=\"hexo安装\"></a>hexo安装</h2><p>使用<em>npm</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo</div></pre></td></tr></table></figure></p>\n<p>安装完在一个空目录执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div><div class=\"line\">npm install</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>然后打开 <a href=\"http://127.0.0.1:4000\" target=\"_blank\" rel=\"external\">127.0.0.1:4000</a> ，就可以看到默认的网页界面了。<br>此时如果你很想看到在外网访问的样子，就直接跳到 <a href=\"#部署到github pages上\">部署到github pages上</a> 。</p>\n<h2 id=\"写篇文章\"><a href=\"#写篇文章\" class=\"headerlink\" title=\"写篇文章\"></a>写篇文章</h2> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new post 文章标题</div></pre></td></tr></table></figure>\n<p> 当然你也可以在 <code>sourc\\_posts</code> 目录新建 .md 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: git sourcetree 解决冲突  <span class=\"comment\">#文件标题</span></div><div class=\"line\">date: 2015-04-16 14:55:48\t   <span class=\"comment\">#文章生成时间</span></div><div class=\"line\">categories: 笔记               <span class=\"comment\">#分类</span></div><div class=\"line\">tags: [git,sourcetree]         <span class=\"comment\">#标签 数组形式 </span></div><div class=\"line\">layout: post\t\t\t\t   <span class=\"comment\">#使用的布局，在做自定义页面时会很有用，默认 post</span></div><div class=\"line\">link: http://baidu.com\t\t  <span class=\"comment\">#文章自定义链接 默认是_config文件配置的 :year/:month/:day/:title/</span></div><div class=\"line\"></div><div class=\"line\">---  <span class=\"comment\">#文章内容用 --- 分割</span></div><div class=\"line\">这里是文章摘要</div><div class=\"line\">&lt;!--more--&gt;   <span class=\"comment\">#&lt;!--more--&gt;来分割文章摘要，下面是余下全文</span></div><div class=\"line\">这里是余下全文</div></pre></td></tr></table></figure>\n<p><strong>！注意冒号 : 后面一定要带空格</strong></p>\n<p>如果不打算发布，还只是草稿，可以将md文件放到 <code>source\\_drafts</code> 目录，就不会出现到列表了，执行<code>hexo s --draft</code>命令可以预览。</p>\n<h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><p><a href=\"http://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">有那些好看的hexo主题？</a>，看了前十几个，都挺好看，但我还是觉得默认的主题好看点。。。<br>可以找下如果有喜欢的主题可以放到根目录的 themes 文件夹下，然后更改 <em>_config.yml</em> 文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: landscape <span class=\"comment\">#主题名称，对应 \\themes 下文件夹的名称</span></div></pre></td></tr></table></figure></p>\n<p>更改完 <em>_config</em> 文件记得重新执行 <code>hexo s</code> 才能看到效果哦。 </p>\n<h2 id=\"主题的修改\"><a href=\"#主题的修改\" class=\"headerlink\" title=\"主题的修改\"></a>主题的修改</h2><p> 持续更新中~</p>\n<h2 id=\"自定义页面\"><a href=\"#自定义页面\" class=\"headerlink\" title=\"自定义页面\"></a>自定义页面</h2><p>在 <code>/source</code> 文件夹下新建 md 文件都会生成对应的 <code>md文件名.html</code> 。<br>比如需要一个 <em>关于我</em> 的页面，路径是 <a href=\"http://www.lred.me/about/index.html\">www.lred.me/about/index.html</a> 则在<code>/source/about/</code> 新建 <code>index.md</code> 文件。<br>但发现新建的页面布局跟博客文章的布局一样，如果需要更改可以参考 <a href=\"http://blog.zanlabs.com/2015/01/02/add-resume-type-to-hexo-under-pacman-theme/\" target=\"_blank\" rel=\"external\">Pacman主题下给Hexo增加简历类型</a></p>\n<h2 id=\"404页面\"><a href=\"#404页面\" class=\"headerlink\" title=\"404页面\"></a>404页面</h2><p>GitHub Pages 自定义404页面非常容易，直接在source根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名，跟你本地的127.0.0.1是不起作用的。<br>所以我们在 <code>/source/</code> 新建 <code>404.md</code> 。</p>\n<h2 id=\"图片放哪\"><a href=\"#图片放哪\" class=\"headerlink\" title=\"图片放哪\"></a>图片放哪</h2><ol>\n<li>可以使用七牛，将图片上传至七牛空间后拿到图片地址，就可以插入到文章了</li>\n<li>图片放在hexo，发布到github上，我现在是这么干的，在国内访问速度肯定是没七牛的快，不过我觉得够用了，上传到七牛，分开两个地方，维护又变麻烦了。<br>我是将图片都放 <code>/source/imgs</code> 目录下，使用时直接写<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![](/imgs/1.png)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"评论插件\"><a href=\"#评论插件\" class=\"headerlink\" title=\"评论插件\"></a>评论插件</h2><p>我使用的是 <a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a> ，注册申请后做以下修改</p>\n<ul>\n<li><p>在 <em>_config.yml</em> 最后添加以下代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Duoshuo</span></div><div class=\"line\">duoshuo_shortname: lred <span class=\"comment\">#你在 多说 的域名 比如我说是 lred.duoshuo.com  就填 lred</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>打开文件 <code>\\themes\\landscape\\layout/_partial/article.ejs</code> 最后添加</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共js代码 end --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">config.duoshuo_shortname</span>)&#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= post.path %&gt;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&lt;%= post.title %&gt;\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%= post.permalink %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>打开文件 <code>\\themes\\landscape\\layout\\_partial\\after-footer.ejs</code> 最后添加</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共js代码 end --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">config.duoshuo_shortname</span>)&#123; %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> duoshuo_shortname = <span class=\"string\">'&lt;%= config.duoshuo_shortname %&gt;'</span>;</span></div><div class=\"line\"><span class=\"actionscript\">  &lt;% <span class=\"keyword\">if</span> (page.permalink)&#123; %&gt;</span></div><div class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> disqus_url = <span class=\"string\">'&lt;%= page.permalink %&gt;'</span>;</span></div><div class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span></span></div><div class=\"line\"><span class=\"actionscript\">  (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> dsq = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span></div><div class=\"line\"><span class=\"actionscript\">    dsq.type = <span class=\"string\">'text/javascript'</span>;</span></div><div class=\"line\"><span class=\"actionscript\">    dsq.async = <span class=\"literal\">true</span>;</span></div><div class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    dsq.src = '//' + duoshuo_shortname + '.disqus.com/<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">page.comments</span>) &#123; %&gt;</span>embed.js<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span>count.js<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span>';</span></span></div><div class=\"line\"><span class=\"javascript\">    (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>] || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(dsq);</span></div><div class=\"line\"><span class=\"undefined\">  &#125;)();</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"文章搜索\"><a href=\"#文章搜索\" class=\"headerlink\" title=\"文章搜索\"></a>文章搜索</h2><p><a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype.html\" target=\"_blank\" rel=\"external\">利用swiftype为hexo添加站内搜索</a></p>\n<h2 id=\"处理原先的文章地址\"><a href=\"#处理原先的文章地址\" class=\"headerlink\" title=\"处理原先的文章地址\"></a>处理原先的文章地址</h2><p>之前的博客，有几篇文章有点访问量，搬家后url又跟之前不兼容，又不想让收藏了文章的人进来后发现404了，可以参考下这么干。<br>比如我之前文章链接是 <a href=\"http://www.lred.me/article/30\">http://www.lred.me/article/30</a><br>新文章链接是 <a href=\"http://www.lred.me/2015/04/16/git%20sourcetree%20%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/\">http://www.lred.me/2015/04/16/git%20sourcetree%20解决冲突/</a><br>在 <code>/source/article/30/</code> 新建 <code>index.md</code> 文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 文章已经搬家了，正在跳转</div><div class=\"line\">---</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\">location.href=<span class=\"string\">\"/2015/04/16/git%20sourcetree%20解决冲突/\"</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>进来后就自动跳转到新的地址了。</p>\n<h2 id=\"部署到github-pages上\"><a href=\"#部署到github-pages上\" class=\"headerlink\" title=\"部署到github pages上\"></a>部署到github pages上</h2><ol>\n<li>在github创建Repository<br>创建的时候注意Repository的名字。比如我的Github账号是<strong>fzred</strong>，那么我应该创建的Repository的名字是：<strong>fzred.github.io</strong> 。<br>然后copy ssh url，注意是 <strong>ssh</strong> 的，不然 <code>hexo d</code> 无法上传到github上。</li>\n<li><p>安装 hexo-deployer-git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <code>_config.yml</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: git@github.com:fzred/fzred.github.io.git  <span class=\"comment\">#Repository的ssh url</span></div><div class=\"line\">  branch: master</div><div class=\"line\">  message: hexo deploy</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置SSH keys<br>怎么设置<a href=\"http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html\" target=\"_blank\" rel=\"external\">参考</a>,<br>验证是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后使用hexo发布到github上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n</li>\n<li><p>到这就能访问了 <a href=\"http://fzred.github.io\" target=\"_blank\" rel=\"external\">fzred.github.io</a> , fzred换成你自己的名字</p>\n</li>\n</ol>\n<h2 id=\"github-pages域名绑定\"><a href=\"#github-pages域名绑定\" class=\"headerlink\" title=\"github pages域名绑定\"></a>github pages域名绑定</h2><ol>\n<li>添加两条域名A记录的域名解析IP分别是 <strong>192.30.252.153</strong> 、<strong>192.30.252.154</strong> </li>\n<li>上传CNAME<br>github pages绑定需要在，代码的根目录下新建一个名为CNAME的文件把你的域名写进去<br>比如我的域名是 <a href=\"http://www.lred.me\">www.lred.me</a> ，既在 <code>/source/</code> 新建 <code>CNAME</code> 文件，内容写上 <strong>www.lred.me</strong></li>\n<li>部署到github pages<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><ol>\n<li><p>hexo-generator-feed rss订阅功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>\n<p>之后重新部署，访问/atom.xml。</p>\n</li>\n<li><p>hexo-generator-sitemap  sitemap</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>\n<p>之后重新部署，访问/sitemap.xml,可以把sitemap提交到搜索引擎的站长平台来增加收录。</p>\n</li>\n</ol>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li>改了样式不生效，本地预览没问题，上传到git后还是原来的样式。<br>解决方法：把本地的<em>public</em>文件夹删除了，再生成发布</li>\n</ol>\n","categories":["笔记"],"tags":["git","hexo"]},{"title":"移动端雪碧图自适应动画 rem","url":"http://www.lred.me/2015/10/29/移动端雪碧图自适应动画 rem/","content":"<p><img src=\"/imgs/1446108265323000400.gif\" alt=\"\"><br><a id=\"more\"></a><br>一开始的方案是每一帧的图片分开，到哪一帧就显示哪一个img标签，写起来也是相对简单，但下图这个动画用了64张图片，导致加载很慢。<br>于是，使用雪碧图的方法来做。但在移动端上写起来并不简单，需要将图片放大或缩小来自适应各种设备。</p>\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">myapp.directive(<span class=\"string\">\"pngAnimation\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$timeout</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict: <span class=\"string\">'AE'</span>,</div><div class=\"line\">        link: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">scope, element, attr</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> img,</div><div class=\"line\">                count = <span class=\"built_in\">parseInt</span>(attr.count),</div><div class=\"line\">                path = attr.path,</div><div class=\"line\">                countTime = <span class=\"built_in\">parseInt</span>(attr.time),</div><div class=\"line\">                curIndex = <span class=\"number\">0</span>;</div><div class=\"line\">            img = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">            img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                execute();</div><div class=\"line\">            &#125;;</div><div class=\"line\">            img.src = path;</div><div class=\"line\">            element.css(&#123;</div><div class=\"line\">                <span class=\"string\">\"background-image\"</span>: <span class=\"string\">\"url(\"</span> + path + <span class=\"string\">\")\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (curIndex &gt;= count) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span></div><div class=\"line\">                &#125;;</div><div class=\"line\">                $timeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    element.css(&#123;</div><div class=\"line\">                        <span class=\"string\">\"background-position\"</span>: ((curIndex + <span class=\"number\">1</span>) / (count)) * <span class=\"number\">100</span> + <span class=\"string\">\"% 0%\"</span></div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    curIndex++;</div><div class=\"line\">                    execute();</div><div class=\"line\">                &#125;, countTime / count);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"png_animation\"</span> png-animation <span class=\"built_in\">time</span>=<span class=\"string\">\"3000\"</span> <span class=\"built_in\">count</span>=<span class=\"string\">\"63\"</span> path=<span class=\"string\">\"http://static.52xiaoluo.com/1111animate_c.png\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.png_animation</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">5.333rem</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">5.067rem</span>;</div><div class=\"line\">    <span class=\"attribute\">background-size</span>: <span class=\"number\">6400%</span> <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["前端"],"tags":["angularjs","css"]},{"title":"cordova 混合移动应用程序 环境安装","url":"http://www.lred.me/2015/10/19/cordova 混合移动应用程序 环境安装/","content":"<h3 id=\"什么是混合移动应用程序\"><a href=\"#什么是混合移动应用程序\" class=\"headerlink\" title=\"什么是混合移动应用程序?\"></a>什么是混合移动应用程序?</h3><p>混合应用程序只是一个普通的移动优化的网站，用CSS，HTML和JavaScript编写，在webview上显示（它基本上是一个精简的Web浏览器），必要时需要由native提供原生的接口。在大多数情况下，不用修改就可以在 Android，iOS 和 Windows Phone 上运行。<br>关于<a href=\"http://www.oschina.net/translate/comparing-the-top-frameworks-for-building-hybrid-mobile-apps-1\" target=\"_blank\" rel=\"external\">混合移动应用开发的各种技术</a><br><a id=\"more\"></a></p>\n<h2 id=\"Cordova-PhoneGap\"><a href=\"#Cordova-PhoneGap\" class=\"headerlink\" title=\"Cordova/PhoneGap\"></a><a href=\"http://cordova.apache.org/\" target=\"_blank\" rel=\"external\">Cordova/PhoneGap</a></h2><p>相对于其他解决方案，PhoneGap要更成熟，拥有丰富的插件。</p>\n<h2 id=\"Ionic\"><a href=\"#Ionic\" class=\"headerlink\" title=\"Ionic\"></a><a href=\"http://www.ionic.wang/\" target=\"_blank\" rel=\"external\">Ionic</a></h2><p>HTML5 手机应用开发框架，配合PhoneGap开发混合移动应用前端框架（不是必须），完美的融合了AngularJS。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><ul>\n<li>安装JDK</li>\n<li>安装ANT</li>\n<li>安装Android SDK</li>\n<li>运行 Android SDK Manager，下载特定 API 版本的库及工具</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cordova ionic</div><div class=\"line\">ionic start myApp</div><div class=\"line\"><span class=\"built_in\">cd</span> myApp</div><div class=\"line\">ionic platform add android</div><div class=\"line\">ionic build android</div><div class=\"line\">ionic <span class=\"built_in\">emulate</span> android</div></pre></td></tr></table></figure>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><ul>\n<li><a href=\"http://incubator.apache.org/projects/ripple.html\" target=\"_blank\" rel=\"external\">Ripple Emulator</a><br>基于 Google Chrome 的移动设备模拟器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g ripple-emulator</div><div class=\"line\">cordova platform add android</div><div class=\"line\">ripple <span class=\"built_in\">emulate</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><a href=\"http://www.tuicool.com/articles/mAzmq2\" target=\"_blank\" rel=\"external\">Weinre</a><br>Web Inspector Remote、是基于WebKit（比如Chrome、Safari）的调试工具。 </p>\n</li>\n<li><p><a href=\"http://www.raymondcamden.com/2014/7/2/GapDebug-a-new-mobile-debugging-tool\" target=\"_blank\" rel=\"external\">GapDebug</a></p>\n</li>\n</ul>\n<p>类似于Weinre</p>\n<ul>\n<li><p><a href=\"http://app.phonegap.com\" target=\"_blank\" rel=\"external\">PhoneGap Developer App</a><br>不需要编译就能在真机上测试应用。通过phonegap serve指令起一个服务器，通过WiFi与一台移动设备上的PhoneGap配对。这台服务器监控代码的变动，并把它们自动地发送到那台设备上，而不用执行本地编译。 </p>\n</li>\n<li><p>Android AVD &amp; 真机调试<br>模拟器太卡了，简直没法用了，还是用真机靠谱</p>\n</li>\n<li><p>Visual Studio &amp; WebStorm<br>对Corodva有很好的支持，集成Ripple,模拟器，<strong>推荐</strong></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/tugenhua0707/p/4623317.html\" target=\"_blank\" rel=\"external\">Fiddler</a><br>抓包代理，Web开发必备了</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上，环境的搭建比较折腾，当碰到网络问题时，可能只是需要科学上网。需要会的东西大概有gulp,sass,ionic,angularjs。想要让应用快速跑起来，Visual Studio 是最佳的开发工具。</p>\n","categories":["前端"],"tags":["js","cordova"]},{"title":"百度地图API 移动端Click失效Bug 解决方法","url":"http://www.lred.me/2015/09/15/百度地图API 移动端Click失效Bug 解决方法/","content":"<p>部分机型click事件失效，这问题在”API大众版” “API极速版” 都会出现，原因不太清楚，解决办法是用 touchstart touchend 来模拟。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* #region 解决部分机型点击事件失效 */</span></div><div class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"number\">0</span>, tempPoint;</div><div class=\"line\">map.addEventListener(<span class=\"string\">\"touchstart\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $mapInput.blur();</div><div class=\"line\">    timeout = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    tempPoint = e.point;</div><div class=\"line\">&#125;);</div><div class=\"line\">map.addEventListener(<span class=\"string\">\"touchend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cur = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cur - timeout &lt; <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        selectPoint(tempPoint);</div><div class=\"line\">        local.clearResults();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">/* #endregion*/</span></div></pre></td></tr></table></figure></p>\n","categories":["笔记"],"tags":["js","移动端"]},{"title":"ueditor源码编辑时 空格 被转换成 &nbsp;","url":"http://www.lred.me/2015/09/15/ueditor源码编辑时 空格 被转换/","content":"<p>我使用的是 1.3.6 的版本</p>\n<p>我觉得源码编辑下已经是pre模式了，就不应该把空格给转义掉.</p>\n<p>虽说ueditor很人性化,但这点没考虑到.</p>\n<p>解决如下:</p>\n<p>ueditor.all.js  8257行  isText方法修改为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isText</span>(<span class=\"params\">node, arr</span>) </span>&#123;       </div><div class=\"line\"> arr.push(node.data)     </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":["笔记"],"tags":["js","移动端"]},{"title":"面试时碰到的一算法题","url":"http://www.lred.me/2015/08/15/面试时碰到的一算法题/","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><code>[1,1,2,3,5,8,13,21,...]</code></p>\n<p>找到规律，写个函数返回第n个数；<br><a id=\"more\"></a><br>当时把答案写得太复杂，现在都想不起来怎么写的了，最后虽通过面试，但offer被砍得很低。刚中午想起来又折腾了下</p>\n<h3 id=\"第一个版本\"><a href=\"#第一个版本\" class=\"headerlink\" title=\"第一个版本\"></a>第一个版本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n===<span class=\"number\">0</span>||n===<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a(n<span class=\"number\">-1</span>)+a(n<span class=\"number\">-2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>发现n&gt;40的时候，开始变得很慢。<br><img src=\"/imgs/1443164807808800000.png\" alt=\"\"></p>\n<h3 id=\"第二个版本\"><a href=\"#第二个版本\" class=\"headerlink\" title=\"第二个版本\"></a>第二个版本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> b=(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache=&#123;</div><div class=\"line\">        <span class=\"number\">0</span>:<span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"number\">1</span>:<span class=\"number\">1</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(cache[n])&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache[n];</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            cache[n<span class=\"number\">-1</span>]=b(n<span class=\"number\">-1</span>);</div><div class=\"line\">            cache[n<span class=\"number\">-2</span>]=b(n<span class=\"number\">-2</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> cache[n<span class=\"number\">-1</span>]+cache[n<span class=\"number\">-2</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>这版本明显快很多了<br><img src=\"/imgs/1443164926061800000.png\" alt=\"\"></p>\n<p>也是很遗憾，当时的答案不理想。</p>\n","categories":[],"tags":[]},{"title":"angularjs控制器之间通信，事件通知服务","url":"http://www.lred.me/2015/05/15/angularjs控制器之间通信，事件通知服务/","content":"<!--22-->\n<a id=\"more\"></a>\n<p>最近在使用angular时，发现控制器间的通信还是挺常见的，然后总结写了个简单的service，事件通知服务。</p>\n<p>关于angular里service的概念，这里就不分享了，可以看下这篇文章： Angular.js Services</p>\n<p>service要记住一点就是所有的services都是singleton(单例)的，service更多的是做一些业务逻辑，数据交互。当然，利用单例这特点也可以用来做不同控制器间的通信。控制器间的通信也有多种做法：AngularJS控制器controller如何通信？。</p>\n<p>利用作用域继承的方式。即子控制器继承父控制器中的内容</p>\n<p>基于事件的方式。即$on,$emit,$boardcast这三种方式</p>\n<p>服务方式。写一个服务的单例然后通过注入来使用</p>\n<p>第一种还是有些局限性，第二种用起来并不太方便（或者个人不习惯），于是利用service实现了基于事件的通知方式。</p>\n<h3 id=\"上代码\"><a href=\"#上代码\" class=\"headerlink\" title=\"上代码\"></a>上代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提供给不同控制器的通信</span></div><div class=\"line\">app.factory(<span class=\"string\">\"EventService\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> onEventFunc = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        on: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">type, f</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//事件绑定</span></div><div class=\"line\">            onEventFunc[type] = f;</div><div class=\"line\">        &#125;, <span class=\"attr\">trigger</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">type, data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//触发事件</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> onEventFunc) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (item == type)</div><div class=\"line\">                    onEventFunc[item](data);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//使用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1Controller</span>(<span class=\"params\">EventService</span>) </span>&#123;</div><div class=\"line\">    EventService.on(<span class=\"string\">\"newMess\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//console.log(data);</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2Controller</span>(<span class=\"params\">$scope,EventService</span>) </span>&#123;</div><div class=\"line\">    $scope.send = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//这里是我在项目中使用的一个例子，当发送了新消息，通知另一个控制器</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">//触发事件，通知</span></div><div class=\"line\">        EventService.trigger(<span class=\"string\">\"newMess\"</span>, data);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以基于这思路去扩展实现更复杂的业务。找个时间分享下利用这思路实现的webscoket事件分发。</p>\n<p>时候不早，洗澡去，明天又要上班，最近忙成dog。</p>\n<p><img src=\"/imgs/1431267587649000000.png\" alt=\"\"></p>\n","categories":["前端"],"tags":["angularjs"]},{"title":"git sourcetree 解决冲突","url":"http://www.lred.me/2015/04/16/git sourcetree 解决冲突/","content":"<p>学习git，比较麻烦的问题就是解决冲突了，再高级点就是分支管理。命令行学起来太麻烦，学习成本高，推荐新手用Sourectree来管理git仓库。本文假设你已经会git的基本使用了。在团队开发中，冲突是不可避免的。<br><a id=\"more\"></a></p>\n<h2 id=\"冲突的产生\"><a href=\"#冲突的产生\" class=\"headerlink\" title=\"冲突的产生\"></a>冲突的产生</h2><p>很多命令都可能出现冲突，但从根本上来讲，都是merge 和 patch（应用补丁）时产生冲突。而rebase就是重新设置基准，然后应用补丁的过程，所以也会冲突。git pull会自动merge，repo sync会自动rebase，所以git pull和repo sync也会产生冲突。当然git rebase就更不用说了。</p>\n<p>冲突有多种类型，最常碰到的就是<em>内容冲突</em>了，两个用户同时修改了同一个文件的同一行（一块区域）的代码，就会产生冲突，接下来介绍的就是如何解决。</p>\n<h2 id=\"使用工具\"><a href=\"#使用工具\" class=\"headerlink\" title=\"使用工具\"></a>使用工具</h2><ul>\n<li><p>Beyond Compare (用于编辑冲突)</p>\n</li>\n<li><p>SourceTree （管理git仓库）</p>\n</li>\n</ul>\n<h2 id=\"产生冲突\"><a href=\"#产生冲突\" class=\"headerlink\" title=\"产生冲突\"></a>产生冲突</h2><p>现在服务器文件内容如下<br><img src=\"/imgs/gitsource/1.png\" alt=\"\"><br>本地文件还未pull<br><img src=\"/imgs/gitsource/2.png\" alt=\"\"><br>现在修改本地文件<br><img src=\"/imgs/gitsource/7.png\" alt=\"\"><br>这种情况如果pull合并一定是冲突的。</p>\n<p>拉取下来报错了<br><img src=\"/imgs/gitsource/3.png\" alt=\"\"><br>提示”文件1.txt”冲突。</p>\n<p>现在推送你的提交，也是报错的，因为冲突未解决.</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>在冲突的记录上右键&gt;合并<br><img src=\"/imgs/gitsource/4.png\" alt=\"\"><br><img src=\"/imgs/gitsource/5.png\" alt=\"\"></p>\n<p>查看文件状态，显示有冲突的文件<br><img src=\"/imgs/gitsource/6.png\" alt=\"\"><br>现在看资源管理器，产生了的文件，是合并的辅助文件，合并完如果没自动删除，可以手动删。<br><img src=\"/imgs/gitsource/8.png\" alt=\"\"></p>\n<p>打开 “文件1.txt” 看到，多了一些像是乱码的东西<br><img src=\"/imgs/gitsource/9.png\" alt=\"\"><br>如果冲突地方不多，可以直接编辑文件到正确的状态。也可以打开外部合并工具（如果有），如果安装了Beyond_Compare，会打开Beyond_Compare来合并。<br><img src=\"/imgs/gitsource/10.png\" alt=\"\"></p>\n<p>因为我电脑安装了VS,所有默认打开了VS来合并（egg pain，这个怎么改默认设置）。但VS跟Beyond_Compare合并都一样，具体怎么使用琢磨下就会了。</p>\n<p>如果没有使用工具，是手动合并，就要告诉SourceTree解决。<br><img src=\"/imgs/gitsource/11.png\" alt=\"\"></p>\n<p>合并完后直接提交吧<br><img src=\"/imgs/gitsource/12.png\" alt=\"\"></p>\n<p>osc@git 报500，又挂了，提交不上去，最后还是看不了最终文件。就到这了，休息了。</p>\n","categories":["笔记"],"tags":["git","sourcetree"]},{"title":"","url":"http://www.lred.me/google05af8e4494705a9c.html","content":"google-site-verification: google05af8e4494705a9c.html","categories":[],"tags":[]},{"title":"","url":"http://www.lred.me/404.html","content":"<p>找不到页面</p>\n","categories":[],"tags":[]},{"title":"link","url":"http://www.lred.me/link/index.html","content":"<ul>\n<li><a href=\"http://www.toyou.xyz/\" target=\"_blank\" rel=\"external\">Poem</a></li>\n<li><a href=\"http://www.poorren.com/\" target=\"_blank\" rel=\"external\">朴人博客</a></li>\n</ul>\n<p>交换友链可留言或发邮件到 i@lred.me</p>\n","categories":[],"tags":[]},{"title":"关于","url":"http://www.lred.me/about/index.html","content":"<p><img src=\"/images/headimg_dl.png\" alt=\"\"></p>\n<h3 id=\"方增鸿\"><a href=\"#方增鸿\" class=\"headerlink\" title=\"方增鸿\"></a>方增鸿</h3><p>96年出生，目前在深圳，任职于某互联网公司的前端工程师职位。</p>\n<h3 id=\"本博客\"><a href=\"#本博客\" class=\"headerlink\" title=\"本博客\"></a>本博客</h3><p>有感而发，记录一些技术、思想。想关注我的吐槽请移步微博 <a href=\"http://www.weibo.com/lredme?is_all=1\" target=\"_blank\" rel=\"external\">lredme</a> 。</p>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><p>GitHub：<a href=\"https://github.com/fzred\" target=\"_blank\" rel=\"external\">fzred</a><br>微博：<a href=\"http://www.weibo.com/lredme?is_all=1\" target=\"_blank\" rel=\"external\">lredme</a><br>Email：i@lred.me</p>\n<h3 id=\"有人叫我“土豆”？\"><a href=\"#有人叫我“土豆”？\" class=\"headerlink\" title=\"有人叫我“土豆”？\"></a>有人叫我“土豆”？</h3><p>上面这个图片是我一般用作网络上的头像，不少人把它叫做土豆，把我也叫做“土豆”（某技术吹水群）。实际这是《植物大战僵尸》这游戏里的坚果墙，我也忘了当初为什么要用这颗土豆来做头像了。从游戏里截出来的，没有高清无码，只有祖传画质。</p>\n<blockquote>\n<p>坚果：“人们想知道，经常被僵尸啃的感觉怎样？他们不知道，我有限的感官，只能让我感到一种麻麻的感觉，像是，令人放松的背部按摩。”</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"project","url":"http://www.lred.me/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://www.lred.me/search/index.html","content":"","categories":[],"tags":[]},{"title":"文章已经搬家了，正在跳转","url":"http://www.lred.me/article/16/index.html","content":"<script>location.href=\"/2015/09/15/ueditor源码编辑时%20空格%20被转换/\"</script>\n\n\n","categories":[],"tags":[]},{"title":"文章已经搬家了，正在跳转","url":"http://www.lred.me/article/30/index.html","content":"<script>location.href=\"/2015/04/16/git%20sourcetree%20解决冲突/\"</script>\n\n\n","categories":[],"tags":[]},{"title":"文章已经搬家了，正在跳转","url":"http://www.lred.me/article/31/index.html","content":"<script>location.href=\"/2015/05/15/angularjs控制器之间通信，事件通知服务/\"</script>\n\n\n","categories":[],"tags":[]},{"title":"文章已经搬家了，正在跳转","url":"http://www.lred.me/article/37/index.html","content":"<script>location.href=\"/2015/10/19/cordova%20混合移动应用程序%20环境安装/\"</script>\n\n\n","categories":[],"tags":[]},{"title":"文章已经搬家了，正在跳转","url":"http://www.lred.me/article/38/index.html","content":"<script>location.href=\"/2015/10/29/移动端雪碧图自适应动画%20rem/\"</script>\n\n\n","categories":[],"tags":[]}]